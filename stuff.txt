t1 = threading.Thread(target=run_cycle, args=(red_wins, yellow_wins, ties, i, False))
        t2 = threading.Thread(target=run_cycle, args=(red_wins, yellow_wins, ties, i, False))

        t1.start()
        t2.start()

        t1.join()
        t2.join()

        red_wins += t1.red_wins
        yellow_wins += t1.yellow_wins
        ties += t1.ties
        
        red_wins += t2.red_wins
        yellow_wins += t2.yellow_wins
        ties += t2.ties



        with concurrent.futures.ThreadPoolExecutor() as executor:
            f1 = executor.submit(run_cycle, red_wins, yellow_wins, ties, i, False)
            
            f1_answer = f1.result()

            print(f1_answer)

            red_wins += f1_answer[0]
            yellow_wins += f1_answer[1]
            ties += f1_answer[2]

# Old check win method in board


    def check_win(self):

        # If this hits -4, win for red (p1) "X"
        # If this hits 4, win for yellow (p2) "O"
        win_counter = 0

        for row in reversed(range(3, self.HEIGHT)):
            for column in range(self.WIDTH - 3):

                # Checking each row
                for x in range(4):
                    for y in range(4):
                        if self.board[row - x][column + y] == self.p1:
                            win_counter -= 1
                        elif self.board[row - x][column + y] == self.p2:
                            win_counter += 1

                    if self.counter_Check(win_counter) == self.p1:
                        if self.print:
                            print("Red (X) wins!")
                        return True
                    elif self.counter_Check(win_counter) == self.p2:
                        if self.print:
                            print("Yellow (O) wins!")
                        return True
                    
                    win_counter = 0


                # Checking each column
                for x in range(4):
                    for y in range(4):
                        if self.board[row - y][column + x] == self.p1:
                            win_counter -= 1
                        elif self.board[row - y][column + x] == self.p2:
                            win_counter += 1

                    if self.counter_Check(win_counter) == self.p1:
                        if self.print:
                            print("Red (X) wins!")
                        return True
                    elif self.counter_Check(win_counter) == self.p2:
                        if self.print:
                            print("Yellow (O) wins!")
                        return True
                    win_counter = 0

                win_counter = 0


                # Checking the 2 diagonals
                for x in range(4):
                    if self.board[row - x][column + x] == self.p1:
                        win_counter -= 1
                    if self.board[row - x][column + x] == self.p2:
                        win_counter += 1
                
                if self.counter_Check(win_counter) == self.p1:
                    if self.print:
                        print("Red (X) wins!")
                    return True
                elif self.counter_Check(win_counter) == self.p2:
                    if self.print:
                        print("Yellow (O) wins!")
                    return True

                win_counter = 0

                for x in range(4):
                    if self.board[row - 3 + x][column + x] == self.p1:
                        win_counter -= 1
                    if self.board[row - 3 + x][column + x] == self.p2:
                        win_counter += 1

                if self.counter_Check(win_counter) == self.p1:
                    if self.print:
                        print("Red (X) wins!")
                    return True
                elif self.counter_Check(win_counter) == self.p2:
                    if self.print:
                        print("Yellow (O) wins!")
                    return True

                win_counter = 0 

        return False



def minimax(self, board, depth, color, column):
        empty_columns = board.find_empty_columns()
        is_win = board.check_win_optimized(column)

        if self.print:
            sleep(.005)
            print("\n-------------------------")
            print("BOARD BELOW BEING CHECKED")
            print("DEPTH:", depth)
            print(board)
            print("COLUMN BEING CHECKED:", column)
            print("BOARD WIN?", is_win)

        # If there are no more columns, its a tie, return 0
        if len(empty_columns) == 0:
            if self.print:
                print("RETURNING 0, NO MORE COLUMNS")
            return 0

        # If the current color is this minimaxer's color, and there is a win, return 100 for win
        elif depth == 0 and color == self.color and is_win:
            if self.print:
                print("RETURNING 100, I WON")
            return 100

        # Else, the opponent won here, return -100
        elif depth == 0 and color == self.opposite_color and is_win:
            if self.print:
                print("RETURNING -100, I LOST")
            return -100

        # Otherwise, no information gained, report 0 back
        elif depth == 0:
            if self.print:
                print("RETURNING 0, THERE WAS NO WIN FOR EITHER")
            return 0

        # It only enteres here as long as depth isn't 0
        else:
            if color == self.color:
                bestVal = -Inf
                for new_column in empty_columns:
                    board.add_piece(color, column)
                    if self.print:
                        print("LOOKING AT LOCATION", board.find_lowest(column), column)
                    value = self.minimax(board, depth-1, self.opposite_color, new_column)
                    board.remove_piece(column)
                    bestVal = max(bestVal, value)
                return bestVal

            else:
                bestVal = Inf
                for new_column in empty_columns:
                    board.add_piece(color, column)
                    if self.print:
                        print("NEWCOLUMN:",new_column)
                    value = self.minimax(board, depth-1, self.color, new_column)
                    board.remove_piece(column)
                    bestVal = min(bestVal, value)
                return bestVal

    # def add_piece(self, color, column):
    #     self.add_piece_count += 1
    #     column = int(column)
    #     row = self.find_lowest(column)
    #     if row == -1:
    #         return False
    #     else:
    #         # if self.print:
    #         #     print("COLOR:", color, "ROW:", row, "COLUMN:", column)
    #         #self.board_history += str(column)
    #         self.board[row,column] = color.upper()
    #         return True

    # def generate_zobrist(self):
    #     hash = 0
    #     for i in range(self.board):
    #         for j in range(i):
    #             if self.board[i,j] == " ":
    #                 hash ^= self.zArray[i,j,3]
    #             elif self.board[i,j] == "X":
    #                 hash ^= self.zArray[i,j,2]
    #             else:
    #                 hash ^= self.zArray[i,j,3]
    #     return hash

    # def __key(self):
    #     pass
    #     #return key

    # def __hash__(self):
    #     return hash(self.__key())

    # def __eq__(self, other):
    #     if isinstance(other, Board):
    #         return self.__key() == other.__key()
    #     return NotImplemented


    
        # ------------------------
        # ------Multiprocess------
        # ------------------------

        
        # func = partial(self.minimax_process_helper, zobrist, board, self.depth, self.color)

        # pool = mp.Pool()
        # value_list = pool.map(func, arr)
        # pool.close()
        # pool.join()


def minimax_process_helper(self, zobrist, board, depth, color, column):
        temp_board = copy(board)
        temp_board.add_piece(color, column, zobrist)
        ans = self.minimax(zobrist, temp_board, depth, self.opposite_color)
        temp_board.remove_piece(column, zobrist)
        return ans